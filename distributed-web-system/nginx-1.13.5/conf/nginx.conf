
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
error_log  logs/error.log  debug;
#error_log memory:32m debug; #Writing the Debugging Log to Memory.
#working_directory  /tmp/cores/; #Enabling Core Dumps in NGINX Configuration.
#worker_rlimit_core 500M; #The max size of core dump in NGINX Configuration.

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
    
    #debug_connection 192.168.1.1; #Debug Log for Selected IPs
    #debug_connection 192.168.10.0/24;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on; #enabling Compression, which can reduce data size of response message.

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

	#########################################Explanation######################################################
    ################# TLS,https ########################
	#listen              443 ssl;
    #ssl_certificate     /etc/nginx/ssl/company.com.crt;
    #ssl_certificate_key /etc/nginx/ssl/company.com.key;
    #ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
	################# DNS ########################
	#below is for DNS resolve of server hostname, Nginx will try to get ip from below DNS server.
	#resolver 10.0.0.1 valid=300s ipv6=off;
    #resolver_timeout 10s;
	
	################# Load Balancer ########################
	upstream any_str_backend {
        #least_conn|ip_hash|generic_hash|least_time;#default load balancer strategy is Round-Robin.
        zone any_str_backend 64k; #Sharing Data with Multiple Worker Processes
        server 127.0.1.1;
        server 127.0.1.2;
        #server backend1.example.com resolve; # resolve host with DNS server.
        #server backend2.example.com resolve;
        server 192.0.0.1 backup;
        #server locahost:8888 weight=5; #wight by default is 1, e.g. here weight=5, if there are 6 requests and 5 of 6 requests sends to locahost:8888 and 1 of 6 request sends to server www.google.com
        #server www.google.com slow_start=30s; #slow_start means this server recover/available time, during this time it will not receive request.
        #server example.xx.com max_fails=3 fail_timeout=30s; #max_fails by default is 1, it indicates sending request max times when request failed. fail_timeout by default is 10s, that means sending request timeout.
        #server 192.0.0.1 backup; #backup means when all other servers down(unavailable), and backup server will be using.
        
		#server 192.0.0.1 max_conns=2000; #max_conns means max connections in a server, if reached max connection then put other connection to queue.
		#queue 100 timeout=70;#if reach max connections, then put subsequent connections to queue.
		
		#sticky cookie srv_id expires=1h domain=.example.com path=/; #In the example, the srv_id parameter sets the name of the cookie which will be set or inspected. The optional expires parameter sets the time for the browser to keep the cookie. The optional domain parameter defines a domain for which the cookie is set. The optional path parameter defines the path for which the cookie is set. This is the simplest session persistence method.

    }
	
	################## Reverse Proxy ########################
	server {
		#1. keyword [listen] can only has port or ip or both. e.g. listen 8080; or listen 127.0.0.1; or listen localhost;
		#2. keyword [server_name] can any string and it's just a name.
		#3. keyword [location < ,~,~*,=,^~> rgx(aka. prefix-string that will match uri)], http://host:port[uri] e.g. http://127.0.0.1:8080/project/index.jsp and uri=/project/index.jsp
		#   the default "" means uri should be starting with prefix string, e.g. location /permanently/move/url {...}, url: http://localhost:8080/permanently/move/url/x/y/z.jsp
		#   the ~(case-sensitive) means prefix string can in front,middle and back of whole uri path and ~*(case-insensitive), e.g. location ~ \.jsp {...}, url: http://localhost:8080/a/b.jsp or /a/b/c.jsp; location ~ /images/ {...}, url: /a/b/images/c or /images/x/y/z/
		#   the = means precise matching with prefix string, e.g. location = \.jsp {...}
		#   the $ means matching prefix string with end of URI, the ^~ means matching prefix string, the regular expressions are not checked
		#3.1 location matching priority of Nginx: precise match > part match > few match
		#    e.g. input http://127.0.0.1:81/a/b/c/d.html, then nginx match rule: "location /a/b/c" > "location /a/b" > "location /a" > "location /", so finally choose "location /a/b/c" to match.
		#3.2 keyword [root res_path_in_nginx_server>] means where uri path will be searched from by nginx.
		#    e.g. input url: http://127.0.0.1:81/myproject_02/x/y/z/page1.html, then nginx will try to find uri path "/myproject_02/x/y/z/page1.html" under the local "static" folder.
		#    since no uri path /myproject_02/x/y/z/page1.html existed in nginx local static folder, so occur 404 not found.
		#    if input url: http://127.0.0.1:81/myproject_02/example/page3.xhtml will be 200 OK, since uri path "/myproject_02/example/page3.xhtml" can be found in local "static" folder of nginx.
		#3.3 keyword [return http_return_code <redirect_url>], it means response client to redirect. e.g. "return 403" or "return 301 http://www.xx.com", Note: only 30x support redirect url
		#3.4 keyword [error_page errror_code = uri|url] means when error_code is matching xxx and then redirect to other page. e.g. "error_page 404 = /error.html"(req: http://www.x.cn/a/b.html--matched-->http://www.x.cn/error.html) 
		#    or "error_page 404 = error.html"(req: http://www.x.cn/a/b.html--matched-->http://www.x.cn/a/error.html) or "error_page 404 = http://www.xx.com"(req: http://www.x.cn/a/b.html--matched-->http://www.xx.com)
		#3.5 keyword [index page1.html page2.html ...] #it looks page2.html as "index/start" page when input uri path end with / . e.g. input http://www.x.com:81/myproject_02/ ----> http://www.x.com:81/myproject_02/page2.html
		#3.6 keyword [autoindex on] it means if it's not found index page, then list all files under the current uri path.
		#3.7 keyword [health_check interval=10 fails=3 passes=2 uri=/some/path]# enable health check. uri means check health for each server with uri path, e.g. locahost:8888/some/path, www.google.com/some/path,...
		#4. keyword [upstream str_name] means defined group named str_name which can have more and more servers.
		#   the strategy of load balancer can be: Round-Robin, least-conn, ip_hash, generic_hash, least_time.
		#   Round-Robin: sending to server one by one, example:
		#       upstream xx {
		#            
		#            server locahost:8888 weight=5; #wight by default is 1, e.g. here weight=5, if there are 6 requests and 5 of 6 requests sends to locahost:8888 and 1 of 6 request sends to server www.google.com
		#            server www.google.com slow_start=30s; #slow_start means this server recover/available time, during this time it will not receive request.
		#            server example.xx.com max_fails=3 fail_timeout=30s; #max_fails by default is 1, it indicates sending request max times when request failed. fail_timeout by default is 10s, that means sending request timeout.
		#            server 192.0.0.1 backup; #backup means when all other servers down(unavailable), and backup server will be using.
		#            sticky cookie srv_id expires=1h domain=.example.com path=/; #In the example, the srv_id parameter sets the name of the cookie which will be set or inspected. The optional expires parameter sets the time for the browser to keep the cookie. The optional domain parameter defines a domain for which the cookie is set. The optional path parameter defines the path for which the cookie is set. This is the simplest session persistence method.
		#       }
		#   least_conn: choose server with least number of active connections to send, example:
		#       upstream xx {
		#            least_conn;
		#            server locahost:8888;
		#            server www.google.com;
		#            server example.xx.com down;#down mean will not be choosed.
		#        }
		#   ip_hash: choose server based on ip hash of client to send, example:
		#       upstream xx {
		#            ip_hash;
		#            server locahost:8888;
		#            server www.google.com;
		#            server example.xx.com down;#down mean will not be computed.
		#        }
		#   Generic hash: base on parameters to compute hash value to choose server, example:
		#       upstream xx {
		#            hash $request_uri consistent;;
		#            server locahost:8888;
		#            server www.google.com;
		#            server example.xx.com down;#down mean will not be computed.
		#        }
		#   least_time: each request, NGINX Plus selects the server with the lowest average latency and the least number of active connections, where the lowest average latency is calculated based on parameter: header or last_byte, example:
		#       upstream xx {
		#            least_time header;
		#            #least_time last_byte;
		#            server locahost:8888;
		#            server www.google.com;
		#        }
		#
		#Test scenarios: 
		#http://127.0.0.1:8080/myproject_01/page1.html will be 302 redirect to other page.
		#http://127.0.0.1:8080/myproject_01/page2.html will be 302 redirect to other page
		#http://127.0.0.1:8080/myproject_01/page3.xhtml will be 200 OK.
		#http://127.0.0.1:8080/myproject_01/page4.html will be 200 OK.
		#http://127.0.0.1:8080/myproject_01/page5.html will be 302 redirect to http://127.0.0.1:8080/myproject_01/error.html with 200 OK.
		#http://127.0.0.1:8080/myproject_01/page6.html will be 302 redirect to http://127.0.0.1:8080/myproject_01/error.html with 200 OK.
		#http://127.0.0.1:8080/myproject_02/page1.html will be 200 OK.
		#http://127.0.0.1:8080/myproject_02/page2.html will be 404 Not Found since no "location" matched in testing_server_01.
		#http://127.0.0.1:8080/myproject_02/page3.html will be 404 Not Found since no "location" matched in testing_server_01..
		#http://127.0.0.1:8080/myproject_02/example/page3.xhtml will be 200 OK.
		
		################## Logging Debug ########################
		#error_log /path/to/log; #disable the debugging log for current server.
		error_log logs/mylog.log debug; #enable the debugging log for current server and overridden global defined log level.
		################## Enabling Compression and Decompression ########################
		#gzip on; #enable compression.
        #gzip_types      text/plain application/xml; #adding more MIME type to support compression, by default is text/html
        #gzip_proxied    no-cache no-store private expired auth;
        #gzip_min_length 1000; #min size of compression, by default is 20
		#gunzip on; #it means unzip response file and sends to client since some client not support gzip compression.
		
		
		listen 127.0.0.1:8080;
		server_name testing_server_01 example.org www.example.org;
		#root /www/data; #global declare. it can be overridden by indside of location.
		location /static/ {
			root /static/data;	# it means request will access local "/static/data" absolutely path, "/static/data" is absolutely path, "static/data" is relative path.
			error_page 404 = error.html; #it' can url,relative/absolutely path. 
		}
		location /myproject_01/ {
			#gzip_static on; #after set this, it will send response to client as file /myproject_01/x/y/z.gzip
			#proxy_set_header Host $host;
			#proxy_set_header X-Real-IP $remote_addr;
			#proxy_set_header Accept-Encoding ""; #To prevent a header field from being passed to the proxied server, set it to an empty string
			#proxy_buffers 16 4k; # 16 is control the size, 4k indicates the number of buffers allocated for a request.
			#proxy_buffer_size 2k;
			#proxy_buffering off; # default is on.
			#proxy_bind 127.0.0.1; # if proxy_pass http://www.x.cn and there are several ips, so this can bind to dedicate ip.
			
			proxy_pass http://127.0.0.1:81; #normal proxy and input http://127.0.0.1:8080/myproject_01/page2.html, forwarding to http://127.0.0.1:81+request_uri as http://127.0.0.1:81/myproject_01/page2.html
			#proxy_pass http://any_str_backend; # load balancer, the input url will trasfer to upstream group which name is any_str_backend.
			#health_check interval=10 fails=3 passes=2 uri=/some/path;# enable health check. uri means check health for each server with uri path, e.g. locahost:8888/some/path, www.google.com/some/path,...
		}
		location /myproject_01/page1.html {
			proxy_pass http://news.baidu.com; #input http://127.0.0.1:8080/myproject_01/page1.html, forwarding to http://host:port+request_uri as http://news.baidu.com/myproject_01/page1.html
		}
		location /myproject_01/page5.html {
			#request: http://localhost:8080/myproject_01/page5.html, and page5.html is not found by nginx so return code is 404, then nginx replaces page5.html with error.html
			#and return to client with (302 http://locahost:port/myproject_01/error.html), client sends request with new url.
			error_page 404 = error.html;
		}
		location = /myproject_02/page1.html {
			proxy_pass http://127.0.0.1:81; #input http://127.0.0.1:8080/myproject_02/page1.html, forwarding to http://127.0.0.1:81+request_uri as http://127.0.0.1:81/myproject_02/page1.html
		}
		#location /myproject_02/ {
		#	root static;
		#	index page2.html page1.html;
		#}
		location ~ page3\.xhtml$ {
			proxy_pass http://localhost:81; #input http://127.0.0.1:8080/x/y/z.xhtml, forwading to http://localhost:81+request_uri as http://localhost:81/x/y/z.xhtml
		}
		location /wrong/url {
			return 403; #input http://127.0.0.1:8080/wrong/url/a
		}		
		location = /wrong/url {
			return 402; #input http://127.0.0.1:8080/wrong/url
		}
		location /myproject_01/page2.html {
			return http://127.0.0.1:8080/myproject_01/page1.html; #request is page2.html, but response is page1.html since here will return another url to client(browser) to redirect.
		}
		location /permanently/move/url { 
			return 303 http://127.0.0.1:81; #input http://127.0.0.1:8080/permanently/move/url, only support 30x if second parameter is appended, the 30x means redirect of URL.
		}
		location /images/ {
			try_files $uri /images/default.gif;#it means if $uri not found, then try to find out /images/default.gif, then still not found and 404 error.
			#try_files $uri $uri/ $uri.html =404;
			#try_files $uri $uri/ @backend; #if not found, then forwarding to @backend proxy server.
		}
		location @backend {
			proxy_pass http://127.0.0.1;
		}
	}
	server {
		listen 81;
		server_name testing_server_02 any_string_name_here;
		location /myproject_02 {
			root static; # "/static" is absolutely path, "static" is relative path.
			index page2.html page1.html; #it means think of page2.html as "index/start" page. e.g. input http://www.x.com:81/myproject_02 ----> http://www.x.com:81/myproject_02/page2.html
		}
		location / {
			root static;
			autoindex on;#it means if not found page, then list all files of uri path.
			error_page 404 = error.html;
			#sub_filter 'This is page' 'rewriting page by $uri';
			#sub_filter_once on;
		}
	}
}
